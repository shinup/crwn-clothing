{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAaOPBQvWlI0oxbl9_mqMiOzEF7YCAqcX0\",\n  authDomain: \"crwn-db-a929a.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-a929a.firebaseio.com\",\n  projectId: \"crwn-db-a929a\",\n  storageBucket: \"crwn-db-a929a.appspot.com\",\n  messagingSenderId: \"569062710132\",\n  appId: \"1:569062710132:web:1166fac35fe536e2102a21\",\n  measurementId: \"G-X376XZFD8W\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('erro creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport const addCollectionAndDocuments = async (key, objectToAdd) => {\n  const collectionRef = firestore.collection(key);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectToAdd.forEach(item => {\n    const doc = collectionRef.doc();\n    batch.set(doc, item);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/spushpan/learn/crwn-cloathing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","addCollectionAndDocuments","key","objectToAdd","collectionRef","collection","batch","forEach","item","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore';\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyAaOPBQvWlI0oxbl9_mqMiOzEF7YCAqcX0\",\n    authDomain: \"crwn-db-a929a.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-a929a.firebaseio.com\",\n    projectId: \"crwn-db-a929a\",\n    storageBucket: \"crwn-db-a929a.appspot.com\",\n    messagingSenderId: \"569062710132\",\n    appId: \"1:569062710132:web:1166fac35fe536e2102a21\",\n    measurementId: \"G-X376XZFD8W\"\n  };\n\n  export const createUserProfileDocument = async(userAuth, additionalData) =>{\n      if(!userAuth){\n          return;\n      }\n      const userRef = firestore.doc(`users/${userAuth.uid}`);\n      const snapShot = await userRef.get();\n      \n      if(!snapShot.exists){\n          const { displayName, email} = userAuth;\n          const createdAt = new Date();\n\n          try {\n\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n\n            })\n              \n          } catch (error) {\n              console.log('erro creating user', error.message);\n          }\n\n      }\n\n      return userRef;\n  }\n\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n  \n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({ prompt: 'select_account' });\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export const addCollectionAndDocuments = async (key, objectToAdd) => {\n    const collectionRef = firestore.collection(key);\n    console.log(collectionRef);\n    const batch = firestore.batch();\n    objectToAdd.forEach( item => {\n        const doc = collectionRef.doc();\n        batch.set(doc, item);\n    })\n    return await batch.commit();\n  }\n\n  export const convertCollectionsSnapshotToMap = (collections) =>{\n      const transformedCollection = collections.docs.map( doc => {\n          const {title, items} = doc.data();\n\n          return {\n              routeName: encodeURI(title.toLowerCase()),\n              id: doc.id,\n              title,\n              items\n          }\n      })\n      return transformedCollection.reduce((accumulator, collection) => {\n          accumulator[collection.title.toLowerCase()] = collection;\n          return accumulator;\n\n      },{})\n  }\n  \n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}